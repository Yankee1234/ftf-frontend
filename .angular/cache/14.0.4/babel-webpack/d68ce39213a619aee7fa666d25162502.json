{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConfigService = void 0;\n\nconst common_1 = require(\"@nestjs/common\");\n\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\n\nconst lodash_1 = require(\"lodash\");\n\nconst config_constants_1 = require(\"./config.constants\");\n\nlet ConfigService = class ConfigService {\n  constructor(internalConfig = {}) {\n    this.internalConfig = internalConfig;\n    this.cache = {};\n    this._isCacheEnabled = false;\n  }\n\n  set isCacheEnabled(value) {\n    this._isCacheEnabled = value;\n  }\n\n  get isCacheEnabled() {\n    return this._isCacheEnabled;\n  }\n  /**\n   * Get a configuration value (either custom configuration or process environment variable)\n   * based on property path (you can use dot notation to traverse nested object, e.g. \"database.host\").\n   * It returns a default value if the key does not exist.\n   * @param propertyPath\n   * @param defaultValueOrOptions\n   */\n\n\n  get(propertyPath, defaultValueOrOptions, options) {\n    const validatedEnvValue = this.getFromValidatedEnv(propertyPath);\n\n    if (!(0, shared_utils_1.isUndefined)(validatedEnvValue)) {\n      return validatedEnvValue;\n    }\n\n    const defaultValue = this.isGetOptionsObject(defaultValueOrOptions) && !options ? undefined : defaultValueOrOptions;\n    const processEnvValue = this.getFromProcessEnv(propertyPath, defaultValue);\n\n    if (!(0, shared_utils_1.isUndefined)(processEnvValue)) {\n      return processEnvValue;\n    }\n\n    const internalValue = this.getFromInternalConfig(propertyPath);\n\n    if (!(0, shared_utils_1.isUndefined)(internalValue)) {\n      return internalValue;\n    }\n\n    return defaultValue;\n  }\n  /**\n   * Get a configuration value (either custom configuration or process environment variable)\n   * based on property path (you can use dot notation to traverse nested object, e.g. \"database.host\").\n   * It returns a default value if the key does not exist.\n   * If the default value is undefined an exception will be thrown.\n   * @param propertyPath\n   * @param defaultValueOrOptions\n   */\n\n\n  getOrThrow(propertyPath, defaultValueOrOptions, options) {\n    // @ts-expect-error Bypass method overloads\n    const value = this.get(propertyPath, defaultValueOrOptions, options);\n\n    if ((0, shared_utils_1.isUndefined)(value)) {\n      throw new TypeError(`Configuration key \"${propertyPath.toString()}\" does not exist`);\n    }\n\n    return value;\n  }\n\n  getFromCache(propertyPath, defaultValue) {\n    const cachedValue = (0, lodash_1.get)(this.cache, propertyPath);\n    return (0, shared_utils_1.isUndefined)(cachedValue) ? defaultValue : cachedValue;\n  }\n\n  getFromValidatedEnv(propertyPath) {\n    const validatedEnvValue = (0, lodash_1.get)(this.internalConfig[config_constants_1.VALIDATED_ENV_PROPNAME], propertyPath);\n    return validatedEnvValue;\n  }\n\n  getFromProcessEnv(propertyPath, defaultValue) {\n    if (this.isCacheEnabled && (0, lodash_1.has)(this.cache, propertyPath)) {\n      const cachedValue = this.getFromCache(propertyPath, defaultValue);\n      return !(0, shared_utils_1.isUndefined)(cachedValue) ? cachedValue : defaultValue;\n    }\n\n    const processValue = (0, lodash_1.get)(process.env, propertyPath);\n    this.setInCacheIfDefined(propertyPath, processValue);\n    return processValue;\n  }\n\n  getFromInternalConfig(propertyPath) {\n    const internalValue = (0, lodash_1.get)(this.internalConfig, propertyPath);\n    return internalValue;\n  }\n\n  setInCacheIfDefined(propertyPath, value) {\n    if (typeof value === 'undefined') {\n      return;\n    }\n\n    (0, lodash_1.set)(this.cache, propertyPath, value);\n  }\n\n  isGetOptionsObject(options) {\n    return options && (options === null || options === void 0 ? void 0 : options.infer) && Object.keys(options).length === 1;\n  }\n\n};\nConfigService = __decorate([(0, common_1.Injectable)(), __param(0, (0, common_1.Optional)()), __param(0, (0, common_1.Inject)(config_constants_1.CONFIGURATION_TOKEN)), __metadata(\"design:paramtypes\", [Object])], ConfigService);\nexports.ConfigService = ConfigService;","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","__param","paramIndex","decorator","exports","value","ConfigService","common_1","require","shared_utils_1","lodash_1","config_constants_1","constructor","internalConfig","cache","_isCacheEnabled","isCacheEnabled","get","propertyPath","defaultValueOrOptions","options","validatedEnvValue","getFromValidatedEnv","isUndefined","defaultValue","isGetOptionsObject","undefined","processEnvValue","getFromProcessEnv","internalValue","getFromInternalConfig","getOrThrow","TypeError","toString","getFromCache","cachedValue","VALIDATED_ENV_PROPNAME","has","processValue","process","env","setInCacheIfDefined","set","infer","keys","Injectable","Optional","Inject","CONFIGURATION_TOKEN"],"sources":["/home/vladimir/ftf-project/ftf-frontend/node_modules/@nestjs/config/dist/config.service.js"],"sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConfigService = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nconst lodash_1 = require(\"lodash\");\nconst config_constants_1 = require(\"./config.constants\");\nlet ConfigService = class ConfigService {\n    constructor(internalConfig = {}) {\n        this.internalConfig = internalConfig;\n        this.cache = {};\n        this._isCacheEnabled = false;\n    }\n    set isCacheEnabled(value) {\n        this._isCacheEnabled = value;\n    }\n    get isCacheEnabled() {\n        return this._isCacheEnabled;\n    }\n    /**\n     * Get a configuration value (either custom configuration or process environment variable)\n     * based on property path (you can use dot notation to traverse nested object, e.g. \"database.host\").\n     * It returns a default value if the key does not exist.\n     * @param propertyPath\n     * @param defaultValueOrOptions\n     */\n    get(propertyPath, defaultValueOrOptions, options) {\n        const validatedEnvValue = this.getFromValidatedEnv(propertyPath);\n        if (!(0, shared_utils_1.isUndefined)(validatedEnvValue)) {\n            return validatedEnvValue;\n        }\n        const defaultValue = this.isGetOptionsObject(defaultValueOrOptions) && !options\n            ? undefined\n            : defaultValueOrOptions;\n        const processEnvValue = this.getFromProcessEnv(propertyPath, defaultValue);\n        if (!(0, shared_utils_1.isUndefined)(processEnvValue)) {\n            return processEnvValue;\n        }\n        const internalValue = this.getFromInternalConfig(propertyPath);\n        if (!(0, shared_utils_1.isUndefined)(internalValue)) {\n            return internalValue;\n        }\n        return defaultValue;\n    }\n    /**\n     * Get a configuration value (either custom configuration or process environment variable)\n     * based on property path (you can use dot notation to traverse nested object, e.g. \"database.host\").\n     * It returns a default value if the key does not exist.\n     * If the default value is undefined an exception will be thrown.\n     * @param propertyPath\n     * @param defaultValueOrOptions\n     */\n    getOrThrow(propertyPath, defaultValueOrOptions, options) {\n        // @ts-expect-error Bypass method overloads\n        const value = this.get(propertyPath, defaultValueOrOptions, options);\n        if ((0, shared_utils_1.isUndefined)(value)) {\n            throw new TypeError(`Configuration key \"${propertyPath.toString()}\" does not exist`);\n        }\n        return value;\n    }\n    getFromCache(propertyPath, defaultValue) {\n        const cachedValue = (0, lodash_1.get)(this.cache, propertyPath);\n        return (0, shared_utils_1.isUndefined)(cachedValue)\n            ? defaultValue\n            : cachedValue;\n    }\n    getFromValidatedEnv(propertyPath) {\n        const validatedEnvValue = (0, lodash_1.get)(this.internalConfig[config_constants_1.VALIDATED_ENV_PROPNAME], propertyPath);\n        return validatedEnvValue;\n    }\n    getFromProcessEnv(propertyPath, defaultValue) {\n        if (this.isCacheEnabled &&\n            (0, lodash_1.has)(this.cache, propertyPath)) {\n            const cachedValue = this.getFromCache(propertyPath, defaultValue);\n            return !(0, shared_utils_1.isUndefined)(cachedValue) ? cachedValue : defaultValue;\n        }\n        const processValue = (0, lodash_1.get)(process.env, propertyPath);\n        this.setInCacheIfDefined(propertyPath, processValue);\n        return processValue;\n    }\n    getFromInternalConfig(propertyPath) {\n        const internalValue = (0, lodash_1.get)(this.internalConfig, propertyPath);\n        return internalValue;\n    }\n    setInCacheIfDefined(propertyPath, value) {\n        if (typeof value === 'undefined') {\n            return;\n        }\n        (0, lodash_1.set)(this.cache, propertyPath, value);\n    }\n    isGetOptionsObject(options) {\n        return options && (options === null || options === void 0 ? void 0 : options.infer) && Object.keys(options).length === 1;\n    }\n};\nConfigService = __decorate([\n    (0, common_1.Injectable)(),\n    __param(0, (0, common_1.Optional)()),\n    __param(0, (0, common_1.Inject)(config_constants_1.CONFIGURATION_TOKEN)),\n    __metadata(\"design:paramtypes\", [Object])\n], ConfigService);\nexports.ConfigService = ConfigService;\n"],"mappings":"AAAA;;AACA,IAAIA,UAAU,GAAI,QAAQ,KAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;EACnF,IAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;EAAA,IAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGK,MAAM,CAACC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;EAAA,IAA2HO,CAA3H;EACA,IAAI,OAAOC,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EL,CAAC,GAAGI,OAAO,CAACC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCO,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD,IAAIH,CAAC,GAAGV,UAAU,CAACa,CAAD,CAAlB,EAAuBN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACH,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACT,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BG,CAAC,CAACT,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;EAC7E,OAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAcC,MAAM,CAACM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMA,IAAIQ,UAAU,GAAI,QAAQ,KAAKA,UAAd,IAA6B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;EAC1D,IAAI,OAAON,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACO,QAAf,KAA4B,UAA/D,EAA2E,OAAOP,OAAO,CAACO,QAAR,CAAiBF,CAAjB,EAAoBC,CAApB,CAAP;AAC9E,CAFD;;AAGA,IAAIE,OAAO,GAAI,QAAQ,KAAKA,OAAd,IAA0B,UAAUC,UAAV,EAAsBC,SAAtB,EAAiC;EACrE,OAAO,UAAUpB,MAAV,EAAkBC,GAAlB,EAAuB;IAAEmB,SAAS,CAACpB,MAAD,EAASC,GAAT,EAAckB,UAAd,CAAT;EAAqC,CAArE;AACH,CAFD;;AAGAZ,MAAM,CAACM,cAAP,CAAsBQ,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwB,KAAK,CAA7B;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,gBAAD,CAAxB;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,mCAAD,CAA9B;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAMG,kBAAkB,GAAGH,OAAO,CAAC,oBAAD,CAAlC;;AACA,IAAIF,aAAa,GAAG,MAAMA,aAAN,CAAoB;EACpCM,WAAW,CAACC,cAAc,GAAG,EAAlB,EAAsB;IAC7B,KAAKA,cAAL,GAAsBA,cAAtB;IACA,KAAKC,KAAL,GAAa,EAAb;IACA,KAAKC,eAAL,GAAuB,KAAvB;EACH;;EACiB,IAAdC,cAAc,CAACX,KAAD,EAAQ;IACtB,KAAKU,eAAL,GAAuBV,KAAvB;EACH;;EACiB,IAAdW,cAAc,GAAG;IACjB,OAAO,KAAKD,eAAZ;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIE,GAAG,CAACC,YAAD,EAAeC,qBAAf,EAAsCC,OAAtC,EAA+C;IAC9C,MAAMC,iBAAiB,GAAG,KAAKC,mBAAL,CAAyBJ,YAAzB,CAA1B;;IACA,IAAI,CAAC,CAAC,GAAGT,cAAc,CAACc,WAAnB,EAAgCF,iBAAhC,CAAL,EAAyD;MACrD,OAAOA,iBAAP;IACH;;IACD,MAAMG,YAAY,GAAG,KAAKC,kBAAL,CAAwBN,qBAAxB,KAAkD,CAACC,OAAnD,GACfM,SADe,GAEfP,qBAFN;IAGA,MAAMQ,eAAe,GAAG,KAAKC,iBAAL,CAAuBV,YAAvB,EAAqCM,YAArC,CAAxB;;IACA,IAAI,CAAC,CAAC,GAAGf,cAAc,CAACc,WAAnB,EAAgCI,eAAhC,CAAL,EAAuD;MACnD,OAAOA,eAAP;IACH;;IACD,MAAME,aAAa,GAAG,KAAKC,qBAAL,CAA2BZ,YAA3B,CAAtB;;IACA,IAAI,CAAC,CAAC,GAAGT,cAAc,CAACc,WAAnB,EAAgCM,aAAhC,CAAL,EAAqD;MACjD,OAAOA,aAAP;IACH;;IACD,OAAOL,YAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIO,UAAU,CAACb,YAAD,EAAeC,qBAAf,EAAsCC,OAAtC,EAA+C;IACrD;IACA,MAAMf,KAAK,GAAG,KAAKY,GAAL,CAASC,YAAT,EAAuBC,qBAAvB,EAA8CC,OAA9C,CAAd;;IACA,IAAI,CAAC,GAAGX,cAAc,CAACc,WAAnB,EAAgClB,KAAhC,CAAJ,EAA4C;MACxC,MAAM,IAAI2B,SAAJ,CAAe,sBAAqBd,YAAY,CAACe,QAAb,EAAwB,kBAA5D,CAAN;IACH;;IACD,OAAO5B,KAAP;EACH;;EACD6B,YAAY,CAAChB,YAAD,EAAeM,YAAf,EAA6B;IACrC,MAAMW,WAAW,GAAG,CAAC,GAAGzB,QAAQ,CAACO,GAAb,EAAkB,KAAKH,KAAvB,EAA8BI,YAA9B,CAApB;IACA,OAAO,CAAC,GAAGT,cAAc,CAACc,WAAnB,EAAgCY,WAAhC,IACDX,YADC,GAEDW,WAFN;EAGH;;EACDb,mBAAmB,CAACJ,YAAD,EAAe;IAC9B,MAAMG,iBAAiB,GAAG,CAAC,GAAGX,QAAQ,CAACO,GAAb,EAAkB,KAAKJ,cAAL,CAAoBF,kBAAkB,CAACyB,sBAAvC,CAAlB,EAAkFlB,YAAlF,CAA1B;IACA,OAAOG,iBAAP;EACH;;EACDO,iBAAiB,CAACV,YAAD,EAAeM,YAAf,EAA6B;IAC1C,IAAI,KAAKR,cAAL,IACA,CAAC,GAAGN,QAAQ,CAAC2B,GAAb,EAAkB,KAAKvB,KAAvB,EAA8BI,YAA9B,CADJ,EACiD;MAC7C,MAAMiB,WAAW,GAAG,KAAKD,YAAL,CAAkBhB,YAAlB,EAAgCM,YAAhC,CAApB;MACA,OAAO,CAAC,CAAC,GAAGf,cAAc,CAACc,WAAnB,EAAgCY,WAAhC,CAAD,GAAgDA,WAAhD,GAA8DX,YAArE;IACH;;IACD,MAAMc,YAAY,GAAG,CAAC,GAAG5B,QAAQ,CAACO,GAAb,EAAkBsB,OAAO,CAACC,GAA1B,EAA+BtB,YAA/B,CAArB;IACA,KAAKuB,mBAAL,CAAyBvB,YAAzB,EAAuCoB,YAAvC;IACA,OAAOA,YAAP;EACH;;EACDR,qBAAqB,CAACZ,YAAD,EAAe;IAChC,MAAMW,aAAa,GAAG,CAAC,GAAGnB,QAAQ,CAACO,GAAb,EAAkB,KAAKJ,cAAvB,EAAuCK,YAAvC,CAAtB;IACA,OAAOW,aAAP;EACH;;EACDY,mBAAmB,CAACvB,YAAD,EAAeb,KAAf,EAAsB;IACrC,IAAI,OAAOA,KAAP,KAAiB,WAArB,EAAkC;MAC9B;IACH;;IACD,CAAC,GAAGK,QAAQ,CAACgC,GAAb,EAAkB,KAAK5B,KAAvB,EAA8BI,YAA9B,EAA4Cb,KAA5C;EACH;;EACDoB,kBAAkB,CAACL,OAAD,EAAU;IACxB,OAAOA,OAAO,KAAKA,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACuB,KAA/D,CAAP,IAAgFrD,MAAM,CAACsD,IAAP,CAAYxB,OAAZ,EAAqBhC,MAArB,KAAgC,CAAvH;EACH;;AArFmC,CAAxC;AAuFAkB,aAAa,GAAGzB,UAAU,CAAC,CACvB,CAAC,GAAG0B,QAAQ,CAACsC,UAAb,GADuB,EAEvB5C,OAAO,CAAC,CAAD,EAAI,CAAC,GAAGM,QAAQ,CAACuC,QAAb,GAAJ,CAFgB,EAGvB7C,OAAO,CAAC,CAAD,EAAI,CAAC,GAAGM,QAAQ,CAACwC,MAAb,EAAqBpC,kBAAkB,CAACqC,mBAAxC,CAAJ,CAHgB,EAIvBnD,UAAU,CAAC,mBAAD,EAAsB,CAACP,MAAD,CAAtB,CAJa,CAAD,EAKvBgB,aALuB,CAA1B;AAMAF,OAAO,CAACE,aAAR,GAAwBA,aAAxB"},"metadata":{},"sourceType":"script"}