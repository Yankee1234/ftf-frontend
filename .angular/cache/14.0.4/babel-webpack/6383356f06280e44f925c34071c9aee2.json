{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar ConfigModule_1;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConfigModule = void 0;\n\nconst common_1 = require(\"@nestjs/common\");\n\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\n\nconst dotenv = __importStar(require(\"dotenv\"));\n\nconst dotenv_expand_1 = require(\"dotenv-expand\");\n\nconst fs = __importStar(require(\"fs\"));\n\nconst path_1 = require(\"path\");\n\nconst config_host_module_1 = require(\"./config-host.module\");\n\nconst config_constants_1 = require(\"./config.constants\");\n\nconst config_service_1 = require(\"./config.service\");\n\nconst create_config_factory_util_1 = require(\"./utils/create-config-factory.util\");\n\nconst get_registration_token_util_1 = require(\"./utils/get-registration-token.util\");\n\nconst merge_configs_util_1 = require(\"./utils/merge-configs.util\");\n\nlet ConfigModule = ConfigModule_1 = class ConfigModule {\n  /**\n   * This promise resolves when \"dotenv\" completes loading environment variables.\n   * When \"ignoreEnvFile\" is set to true, then it will resolve immediately after the\n   * \"ConfigModule#forRoot\" method is called.\n   */\n  static get envVariablesLoaded() {\n    return this._envVariablesLoaded;\n  }\n  /**\n   * Loads process environment variables depending on the \"ignoreEnvFile\" flag and \"envFilePath\" value.\n   * Also, registers custom configurations globally.\n   * @param options\n   */\n\n\n  static forRoot(options = {}) {\n    let validatedEnvConfig = undefined;\n    let config = options.ignoreEnvFile ? {} : this.loadEnvFile(options);\n\n    if (!options.ignoreEnvVars) {\n      config = Object.assign(Object.assign({}, config), process.env);\n    }\n\n    if (options.validate) {\n      const validatedConfig = options.validate(config);\n      validatedEnvConfig = validatedConfig;\n      this.assignVariablesToProcess(validatedConfig);\n    } else if (options.validationSchema) {\n      const validationOptions = this.getSchemaValidationOptions(options);\n      const {\n        error,\n        value: validatedConfig\n      } = options.validationSchema.validate(config, validationOptions);\n\n      if (error) {\n        throw new Error(`Config validation error: ${error.message}`);\n      }\n\n      validatedEnvConfig = validatedConfig;\n      this.assignVariablesToProcess(validatedConfig);\n    } else {\n      this.assignVariablesToProcess(config);\n    }\n\n    const isConfigToLoad = options.load && options.load.length;\n    const providers = (options.load || []).map(factory => (0, create_config_factory_util_1.createConfigProvider)(factory)).filter(item => item);\n    const configProviderTokens = providers.map(item => item.provide);\n    const configServiceProvider = {\n      provide: config_service_1.ConfigService,\n      useFactory: configService => {\n        if (options.cache) {\n          configService.isCacheEnabled = true;\n        }\n\n        return configService;\n      },\n      inject: [config_constants_1.CONFIGURATION_SERVICE_TOKEN, ...configProviderTokens]\n    };\n    providers.push(configServiceProvider);\n\n    if (validatedEnvConfig) {\n      const validatedEnvConfigLoader = {\n        provide: config_constants_1.VALIDATED_ENV_LOADER,\n        useFactory: host => {\n          host[config_constants_1.VALIDATED_ENV_PROPNAME] = validatedEnvConfig;\n        },\n        inject: [config_constants_1.CONFIGURATION_TOKEN]\n      };\n      providers.push(validatedEnvConfigLoader);\n    }\n\n    this.environmentVariablesLoadedSignal();\n    return {\n      module: ConfigModule_1,\n      global: options.isGlobal,\n      providers: isConfigToLoad ? [...providers, {\n        provide: config_constants_1.CONFIGURATION_LOADER,\n        useFactory: (host, ...configurations) => {\n          configurations.forEach((item, index) => this.mergePartial(host, item, providers[index]));\n        },\n        inject: [config_constants_1.CONFIGURATION_TOKEN, ...configProviderTokens]\n      }] : providers,\n      exports: [config_service_1.ConfigService, ...configProviderTokens]\n    };\n  }\n  /**\n   * Registers configuration object (partial registration).\n   * @param config\n   */\n\n\n  static forFeature(config) {\n    const configProvider = (0, create_config_factory_util_1.createConfigProvider)(config);\n    const serviceProvider = {\n      provide: config_service_1.ConfigService,\n      useFactory: configService => configService,\n      inject: [config_constants_1.CONFIGURATION_SERVICE_TOKEN, configProvider.provide]\n    };\n    return {\n      module: ConfigModule_1,\n      providers: [configProvider, serviceProvider, {\n        provide: config_constants_1.CONFIGURATION_LOADER,\n        useFactory: (host, partialConfig) => {\n          this.mergePartial(host, partialConfig, configProvider);\n        },\n        inject: [config_constants_1.CONFIGURATION_TOKEN, configProvider.provide]\n      }],\n      exports: [config_service_1.ConfigService, configProvider.provide]\n    };\n  }\n\n  static loadEnvFile(options) {\n    const envFilePaths = Array.isArray(options.envFilePath) ? options.envFilePath : [options.envFilePath || (0, path_1.resolve)(process.cwd(), '.env')];\n    let config = {};\n\n    for (const envFilePath of envFilePaths) {\n      if (fs.existsSync(envFilePath)) {\n        config = Object.assign(dotenv.parse(fs.readFileSync(envFilePath)), config);\n\n        if (options.expandVariables) {\n          const expandOptions = typeof options.expandVariables === 'object' ? options.expandVariables : {};\n          config = (0, dotenv_expand_1.expand)(Object.assign(Object.assign({}, expandOptions), {\n            parsed: config\n          })).parsed || config;\n        }\n      }\n    }\n\n    return config;\n  }\n\n  static assignVariablesToProcess(config) {\n    if (!(0, shared_utils_1.isObject)(config)) {\n      return;\n    }\n\n    const keys = Object.keys(config).filter(key => !(key in process.env));\n    keys.forEach(key => process.env[key] = config[key]);\n  }\n\n  static mergePartial(host, item, provider) {\n    const factoryRef = provider.useFactory;\n    const token = (0, get_registration_token_util_1.getRegistrationToken)(factoryRef);\n    (0, merge_configs_util_1.mergeConfigObject)(host, item, token);\n  }\n\n  static getSchemaValidationOptions(options) {\n    if (options.validationOptions) {\n      if (typeof options.validationOptions.allowUnknown === 'undefined') {\n        options.validationOptions.allowUnknown = true;\n      }\n\n      return options.validationOptions;\n    }\n\n    return {\n      abortEarly: false,\n      allowUnknown: true\n    };\n  }\n\n};\nConfigModule._envVariablesLoaded = new Promise(resolve => ConfigModule_1.environmentVariablesLoadedSignal = resolve);\nConfigModule = ConfigModule_1 = __decorate([(0, common_1.Module)({\n  imports: [config_host_module_1.ConfigHostModule],\n  providers: [{\n    provide: config_service_1.ConfigService,\n    useExisting: config_constants_1.CONFIGURATION_SERVICE_TOKEN\n  }],\n  exports: [config_host_module_1.ConfigHostModule, config_service_1.ConfigService]\n})], ConfigModule);\nexports.ConfigModule = ConfigModule;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__decorate","decorators","target","key","c","arguments","length","r","d","Reflect","decorate","i","__importStar","mod","result","prototype","hasOwnProperty","call","ConfigModule_1","exports","ConfigModule","common_1","require","shared_utils_1","dotenv","dotenv_expand_1","fs","path_1","config_host_module_1","config_constants_1","config_service_1","create_config_factory_util_1","get_registration_token_util_1","merge_configs_util_1","envVariablesLoaded","_envVariablesLoaded","forRoot","options","validatedEnvConfig","config","ignoreEnvFile","loadEnvFile","ignoreEnvVars","assign","process","env","validate","validatedConfig","assignVariablesToProcess","validationSchema","validationOptions","getSchemaValidationOptions","error","Error","message","isConfigToLoad","load","providers","map","factory","createConfigProvider","filter","item","configProviderTokens","provide","configServiceProvider","ConfigService","useFactory","configService","cache","isCacheEnabled","inject","CONFIGURATION_SERVICE_TOKEN","push","validatedEnvConfigLoader","VALIDATED_ENV_LOADER","host","VALIDATED_ENV_PROPNAME","CONFIGURATION_TOKEN","environmentVariablesLoadedSignal","module","global","isGlobal","CONFIGURATION_LOADER","configurations","forEach","index","mergePartial","forFeature","configProvider","serviceProvider","partialConfig","envFilePaths","Array","isArray","envFilePath","resolve","cwd","existsSync","parse","readFileSync","expandVariables","expandOptions","expand","parsed","isObject","keys","provider","factoryRef","token","getRegistrationToken","mergeConfigObject","allowUnknown","abortEarly","Promise","Module","imports","ConfigHostModule","useExisting"],"sources":["/home/vladimir/ftf-project/ftf-frontend/node_modules/@nestjs/config/dist/config.module.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar ConfigModule_1;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConfigModule = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst shared_utils_1 = require(\"@nestjs/common/utils/shared.utils\");\nconst dotenv = __importStar(require(\"dotenv\"));\nconst dotenv_expand_1 = require(\"dotenv-expand\");\nconst fs = __importStar(require(\"fs\"));\nconst path_1 = require(\"path\");\nconst config_host_module_1 = require(\"./config-host.module\");\nconst config_constants_1 = require(\"./config.constants\");\nconst config_service_1 = require(\"./config.service\");\nconst create_config_factory_util_1 = require(\"./utils/create-config-factory.util\");\nconst get_registration_token_util_1 = require(\"./utils/get-registration-token.util\");\nconst merge_configs_util_1 = require(\"./utils/merge-configs.util\");\nlet ConfigModule = ConfigModule_1 = class ConfigModule {\n    /**\n     * This promise resolves when \"dotenv\" completes loading environment variables.\n     * When \"ignoreEnvFile\" is set to true, then it will resolve immediately after the\n     * \"ConfigModule#forRoot\" method is called.\n     */\n    static get envVariablesLoaded() {\n        return this._envVariablesLoaded;\n    }\n    /**\n     * Loads process environment variables depending on the \"ignoreEnvFile\" flag and \"envFilePath\" value.\n     * Also, registers custom configurations globally.\n     * @param options\n     */\n    static forRoot(options = {}) {\n        let validatedEnvConfig = undefined;\n        let config = options.ignoreEnvFile ? {} : this.loadEnvFile(options);\n        if (!options.ignoreEnvVars) {\n            config = Object.assign(Object.assign({}, config), process.env);\n        }\n        if (options.validate) {\n            const validatedConfig = options.validate(config);\n            validatedEnvConfig = validatedConfig;\n            this.assignVariablesToProcess(validatedConfig);\n        }\n        else if (options.validationSchema) {\n            const validationOptions = this.getSchemaValidationOptions(options);\n            const { error, value: validatedConfig } = options.validationSchema.validate(config, validationOptions);\n            if (error) {\n                throw new Error(`Config validation error: ${error.message}`);\n            }\n            validatedEnvConfig = validatedConfig;\n            this.assignVariablesToProcess(validatedConfig);\n        }\n        else {\n            this.assignVariablesToProcess(config);\n        }\n        const isConfigToLoad = options.load && options.load.length;\n        const providers = (options.load || [])\n            .map(factory => (0, create_config_factory_util_1.createConfigProvider)(factory))\n            .filter(item => item);\n        const configProviderTokens = providers.map(item => item.provide);\n        const configServiceProvider = {\n            provide: config_service_1.ConfigService,\n            useFactory: (configService) => {\n                if (options.cache) {\n                    configService.isCacheEnabled = true;\n                }\n                return configService;\n            },\n            inject: [config_constants_1.CONFIGURATION_SERVICE_TOKEN, ...configProviderTokens],\n        };\n        providers.push(configServiceProvider);\n        if (validatedEnvConfig) {\n            const validatedEnvConfigLoader = {\n                provide: config_constants_1.VALIDATED_ENV_LOADER,\n                useFactory: (host) => {\n                    host[config_constants_1.VALIDATED_ENV_PROPNAME] = validatedEnvConfig;\n                },\n                inject: [config_constants_1.CONFIGURATION_TOKEN],\n            };\n            providers.push(validatedEnvConfigLoader);\n        }\n        this.environmentVariablesLoadedSignal();\n        return {\n            module: ConfigModule_1,\n            global: options.isGlobal,\n            providers: isConfigToLoad\n                ? [\n                    ...providers,\n                    {\n                        provide: config_constants_1.CONFIGURATION_LOADER,\n                        useFactory: (host, ...configurations) => {\n                            configurations.forEach((item, index) => this.mergePartial(host, item, providers[index]));\n                        },\n                        inject: [config_constants_1.CONFIGURATION_TOKEN, ...configProviderTokens],\n                    },\n                ]\n                : providers,\n            exports: [config_service_1.ConfigService, ...configProviderTokens],\n        };\n    }\n    /**\n     * Registers configuration object (partial registration).\n     * @param config\n     */\n    static forFeature(config) {\n        const configProvider = (0, create_config_factory_util_1.createConfigProvider)(config);\n        const serviceProvider = {\n            provide: config_service_1.ConfigService,\n            useFactory: (configService) => configService,\n            inject: [config_constants_1.CONFIGURATION_SERVICE_TOKEN, configProvider.provide],\n        };\n        return {\n            module: ConfigModule_1,\n            providers: [\n                configProvider,\n                serviceProvider,\n                {\n                    provide: config_constants_1.CONFIGURATION_LOADER,\n                    useFactory: (host, partialConfig) => {\n                        this.mergePartial(host, partialConfig, configProvider);\n                    },\n                    inject: [config_constants_1.CONFIGURATION_TOKEN, configProvider.provide],\n                },\n            ],\n            exports: [config_service_1.ConfigService, configProvider.provide],\n        };\n    }\n    static loadEnvFile(options) {\n        const envFilePaths = Array.isArray(options.envFilePath)\n            ? options.envFilePath\n            : [options.envFilePath || (0, path_1.resolve)(process.cwd(), '.env')];\n        let config = {};\n        for (const envFilePath of envFilePaths) {\n            if (fs.existsSync(envFilePath)) {\n                config = Object.assign(dotenv.parse(fs.readFileSync(envFilePath)), config);\n                if (options.expandVariables) {\n                    const expandOptions = typeof options.expandVariables === 'object' ? options.expandVariables : {};\n                    config = (0, dotenv_expand_1.expand)(Object.assign(Object.assign({}, expandOptions), { parsed: config })).parsed || config;\n                }\n            }\n        }\n        return config;\n    }\n    static assignVariablesToProcess(config) {\n        if (!(0, shared_utils_1.isObject)(config)) {\n            return;\n        }\n        const keys = Object.keys(config).filter(key => !(key in process.env));\n        keys.forEach(key => (process.env[key] = config[key]));\n    }\n    static mergePartial(host, item, provider) {\n        const factoryRef = provider.useFactory;\n        const token = (0, get_registration_token_util_1.getRegistrationToken)(factoryRef);\n        (0, merge_configs_util_1.mergeConfigObject)(host, item, token);\n    }\n    static getSchemaValidationOptions(options) {\n        if (options.validationOptions) {\n            if (typeof options.validationOptions.allowUnknown === 'undefined') {\n                options.validationOptions.allowUnknown = true;\n            }\n            return options.validationOptions;\n        }\n        return {\n            abortEarly: false,\n            allowUnknown: true,\n        };\n    }\n};\nConfigModule._envVariablesLoaded = new Promise(resolve => (ConfigModule_1.environmentVariablesLoadedSignal = resolve));\nConfigModule = ConfigModule_1 = __decorate([\n    (0, common_1.Module)({\n        imports: [config_host_module_1.ConfigHostModule],\n        providers: [\n            {\n                provide: config_service_1.ConfigService,\n                useExisting: config_constants_1.CONFIGURATION_SERVICE_TOKEN,\n            },\n        ],\n        exports: [config_host_module_1.ConfigHostModule, config_service_1.ConfigService],\n    })\n], ConfigModule);\nexports.ConfigModule = ConfigModule;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}