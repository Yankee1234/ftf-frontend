{"ast":null,"code":"import _asyncToGenerator from \"/home/vladimir/ftf-project/ftf-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { INVALID_CREDENTIALS } from 'src/app/domain/constants';\nlet LoginComponent = class LoginComponent {\n  constructor(authService, readonly) {\n    this.authService = authService;\n    this.readonly = readonly;\n    this.emptyInputs = false;\n    this.invalidCredentials = false;\n    this.loginForm = this.createLoginForm();\n  }\n\n  ngOnInit() {}\n\n  createLoginForm() {\n    return new FormGroup({\n      login: new FormControl(''),\n      password: new FormControl('')\n    });\n  }\n\n  login() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const login = _this.loginForm.get('login')?.value;\n      const password = _this.loginForm.get('password')?.value;\n\n      if (login && password && login !== '' && password !== '') {\n        const result = yield _this.authService.login({\n          login: login,\n          password: password\n        });\n\n        if (result === INVALID_CREDENTIALS) {\n          _this.invalidCredentials = true;\n          _this.emptyInputs = false;\n        }\n      } else {\n        _this.emptyInputs = true;\n        _this.invalidCredentials = false;\n      }\n    })();\n  }\n\n  redirectToRegister() {}\n\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":";;AAAA,SAASA,SAAT,QAAkC,eAAlC;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,gBAAvC;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAQA,IAAaC,cAAc,GAA3B,MAAaA,cAAb,CAA2B;EAKzBC,YAA6BC,WAA7B,EAA+DC,QAA/D,EAAuE;IAA1C;IAAkC;IAH/D,mBAAuB,KAAvB;IACA,0BAAqB,KAArB;IAGE,KAAKC,SAAL,GAAiB,KAAKC,eAAL,EAAjB;EACA;;EAEFC,QAAQ,IACP;;EAEOD,eAAe;IACrB,OAAO,IAAIP,SAAJ,CAAc;MACnBS,KAAK,EAAE,IAAIV,WAAJ,CAAgB,EAAhB,CADY;MAEnBW,QAAQ,EAAE,IAAIX,WAAJ,CAAgB,EAAhB;IAFS,CAAd,CAAP;EAID;;EAEKU,KAAK;IAAA;;IAAA;MAAQ,MAAMA,KAAK,GAAG,KAAI,CAACH,SAAL,CAAeK,GAAf,CAAmB,OAAnB,GAA6BC,KAA3C;MACjB,MAAMF,QAAQ,GAAG,KAAI,CAACJ,SAAL,CAAeK,GAAf,CAAmB,UAAnB,GAAgCC,KAAjD;;MAEA,IAAGH,KAAK,IAAIC,QAAT,IAAqBD,KAAK,KAAK,EAA/B,IAAqCC,QAAQ,KAAK,EAArD,EAAyD;QACvD,MAAMG,MAAM,SAAS,KAAI,CAACT,WAAL,CAAiBK,KAAjB,CAAuB;UAACA,KAAK,EAAEA,KAAR;UAAeC,QAAQ,EAAEA;QAAzB,CAAvB,CAArB;;QACA,IAAGG,MAAM,KAAKZ,mBAAd,EAAmC;UACjC,KAAI,CAACa,kBAAL,GAA0B,IAA1B;UACA,KAAI,CAACC,WAAL,GAAmB,KAAnB;QACD;MACF,CAND,MAQK;QACH,KAAI,CAACA,WAAL,GAAmB,IAAnB;QACA,KAAI,CAACD,kBAAL,GAA0B,KAA1B;MACD;IAdQ;EAeV;;EAEDE,kBAAkB,IAEjB;;AAtCwB,CAA3B;AAAad,cAAc,eAL1BJ,SAAS,CAAC;EACTmB,QAAQ,EAAE,WADD;EAETC,WAAW,EAAE,wBAFJ;EAGTC,SAAS,EAAE,CAAC,wBAAD;AAHF,CAAD,CAKiB,GAAdjB,cAAc,CAAd;SAAAA","names":["Component","FormControl","FormGroup","INVALID_CREDENTIALS","LoginComponent","constructor","authService","readonly","loginForm","createLoginForm","ngOnInit","login","password","get","value","result","invalidCredentials","emptyInputs","redirectToRegister","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/vladimir/ftf-project/ftf-frontend/src/app/auth/components/login/login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { INVALID_CREDENTIALS } from 'src/app/domain/constants';\nimport { AuthService } from '../../auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  loginForm: FormGroup;\n  emptyInputs: boolean = false;\n  invalidCredentials = false;\n\n  constructor(private readonly authService: AuthService, private readonly) {\n    this.loginForm = this.createLoginForm();\n   }\n\n  ngOnInit(): void {\n  }\n\n  private createLoginForm() {\n    return new FormGroup({\n      login: new FormControl(''),\n      password: new FormControl('')\n    })\n  }\n\n  async login() {    const login = this.loginForm.get('login')?.value;\n    const password = this.loginForm.get('password')?.value;\n\n    if(login && password && login !== '' && password !== '') {\n      const result = await this.authService.login({login: login, password: password});\n      if(result === INVALID_CREDENTIALS) {\n        this.invalidCredentials = true;\n        this.emptyInputs = false;\n      } \n    }\n    \n    else {\n      this.emptyInputs = true;\n      this.invalidCredentials = false;\n    } \n  }\n\n  redirectToRegister() {\n\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}