{"ast":null,"code":"import _asyncToGenerator from \"/home/vladimir/ftf-project/ftf-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport axios from 'axios';\nimport { BACKEND_APP_URL, INVALID_CREDENTIALS } from '../domain/constants';\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.httpClient = axios.create({\n      baseURL: `${BACKEND_APP_URL}/auth`\n    });\n  }\n\n  login(req) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise(resolve => {});\n      const data = yield _this.httpClient.post('/login', {\n        login: req.login,\n        password: req.password\n      }).then(data => {\n        if (data.data) {\n          console.log(data.data);\n        }\n      }).catch(err => {\n        const statusCode = err.response.data.statusCode;\n        return INVALID_CREDENTIALS;\n      });\n    })();\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)();\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,OAAOA,KAAP,MAAqC,OAArC;AAEA,SAASC,eAAT,EAA0BC,mBAA1B,QAAqD,qBAArD;;AAMA,OAAM,MAAOC,WAAP,CAAkB;EAItBC;IACE,KAAKC,UAAL,GAAkBL,KAAK,CAACM,MAAN,CAAa;MAC7BC,OAAO,EAAE,GAAGN,eAAe;IADE,CAAb,CAAlB;EAGD;;EAEKO,KAAK,CAACC,GAAD,EAAsB;IAAA;;IAAA;MAC/B,OAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAY,CAE9B,CAFM,CAAP;MAGA,MAAMC,IAAI,SAAS,KAAI,CAACP,UAAL,CAAgBQ,IAAhB,CAA6B,QAA7B,EAAuC;QAACL,KAAK,EAAEC,GAAG,CAACD,KAAZ;QAAmBM,QAAQ,EAAEL,GAAG,CAACK;MAAjC,CAAvC,EAAmFC,IAAnF,CAAyFH,IAAD,IAAS;QAClH,IAAGA,IAAI,CAACA,IAAR,EAAc;UACZI,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACA,IAAjB;QACD;MACF,CAJkB,EAIhBM,KAJgB,CAITC,GAAD,IAAQ;QACf,MAAMC,UAAU,GAAGD,GAAG,CAACE,QAAJ,CAAaT,IAAb,CAAkBQ,UAArC;QACA,OAAOlB,mBAAP;MACD,CAPkB,CAAnB;IAJ+B;EAYhC;;AAtBqB;;;mBAAXC;AAAW;;;SAAXA;EAAWmB,SAAXnB,WAAW;EAAAoB,YAFV","names":["axios","BACKEND_APP_URL","INVALID_CREDENTIALS","AuthService","constructor","httpClient","create","baseURL","login","req","Promise","resolve","data","post","password","then","console","log","catch","err","statusCode","response","factory","providedIn"],"sourceRoot":"","sources":["/home/vladimir/ftf-project/ftf-frontend/src/app/auth/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport axios, { AxiosInstance } from 'axios';\nimport { catchError } from 'rxjs';\nimport { BACKEND_APP_URL, INVALID_CREDENTIALS } from '../domain/constants';\nimport { AuthLoginRequest } from './dtos/auth-login-request.dto';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private readonly httpClient: AxiosInstance\n\n  constructor() {\n    this.httpClient = axios.create({\n      baseURL: `${BACKEND_APP_URL}/auth`\n    })\n  }\n\n  async login(req: AuthLoginRequest) {\n    return new Promise((resolve) => {\n      \n    })\n    const data = await this.httpClient.post<string>('/login', {login: req.login, password: req.password}).then((data) =>{\n      if(data.data) {\n        console.log(data.data)\n      }\n    }).catch((err) => {\n      const statusCode = err.response.data.statusCode;\n      return INVALID_CREDENTIALS;\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}